
enum NotificationType {
  OWNERSHIPREQUEST
  OWNERSHIPAPPROVED
  OWNERSHIPDENIED
}

type Notification @aws_iam @aws_api_key {
  id: ID!
  message: String!
  type: NotificationType!
  Sender: ID
  userID: ID!
  title: String!
  businessRequestID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User @aws_iam @aws_api_key {
  id: ID!
  email: AWSEmail!
  profilePic: AWSURL
  Collections(filter: ModelCollectionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCollectionConnection
  name: String!
  isModerator: Boolean
  Notifications(filter: ModelNotificationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelNotificationConnection
  Businesses(filter: ModelBusinessFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelBusinessConnection
  Reviews(filter: ModelReviewFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelReviewConnection
  defaultAddress: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum BusinessType {
  RESTAURANT
  SHOPPING
  MARKET
  BEAUTY
}

enum MinorityGroups {
  ASIANAMERICAN
  AFRICANAMERICAN
  LATINX
  MIDDLEEASTERN
  NATIVEAMERICAN
  PACIFICISLANDER
  ALASKANATIVE
  MUSLIM
  HALAL
  JEWISH
  KOSHER
  HINDU
  SIKH
}

type Review @aws_iam @aws_api_key {
  id: ID!
  rating: Int
  comments: String
  businessID: ID
  userID: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Business @aws_iam @aws_api_key {
  id: ID!
  name: String!
  about: String!
  phone: AWSPhone!
  address: String!
  website: AWSURL
  tags: [MinorityGroups!]
  type: BusinessType!
  primarycolor: String!
  secondarycolor: String!
  rating: Int
  Reviews(filter: ModelReviewFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelReviewConnection
  collectionID: ID
  email: AWSEmail!
  city: String!
  state: String!
  zipcode: Int!
  menu: AWSURL
  profileImage: AWSURL
  bannerImage: AWSURL
  isVerified: Boolean
  userID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Collection @aws_iam @aws_api_key {
  id: ID!
  title: String!
  description: String
  color: String
  Businesses(filter: ModelBusinessFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelBusinessConnection
  userID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelNotificationConnection @aws_api_key @aws_iam {
  items: [Notification]!
  nextToken: String
}

input ModelNotificationTypeInput {
  eq: NotificationType
  ne: NotificationType
}

input ModelNotificationFilterInput {
  id: ModelIDInput
  message: ModelStringInput
  type: ModelNotificationTypeInput
  Sender: ModelIDInput
  userID: ModelIDInput
  title: ModelStringInput
  businessRequestID: ModelIDInput
  and: [ModelNotificationFilterInput]
  or: [ModelNotificationFilterInput]
  not: ModelNotificationFilterInput
}

type Query {
  getNotification(id: ID!): Notification @aws_api_key @aws_iam
  listNotifications(filter: ModelNotificationFilterInput, limit: Int, nextToken: String): ModelNotificationConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  getReview(id: ID!): Review @aws_api_key @aws_iam
  listReviews(filter: ModelReviewFilterInput, limit: Int, nextToken: String): ModelReviewConnection @aws_api_key @aws_iam
  getBusiness(id: ID!): Business @aws_api_key @aws_iam
  listBusinesses(filter: ModelBusinessFilterInput, limit: Int, nextToken: String): ModelBusinessConnection @aws_api_key @aws_iam
  getCollection(id: ID!): Collection @aws_api_key @aws_iam
  listCollections(filter: ModelCollectionFilterInput, limit: Int, nextToken: String): ModelCollectionConnection @aws_api_key @aws_iam
}

input ModelNotificationConditionInput {
  message: ModelStringInput
  type: ModelNotificationTypeInput
  Sender: ModelIDInput
  userID: ModelIDInput
  title: ModelStringInput
  businessRequestID: ModelIDInput
  and: [ModelNotificationConditionInput]
  or: [ModelNotificationConditionInput]
  not: ModelNotificationConditionInput
}

input CreateNotificationInput {
  id: ID
  message: String!
  type: NotificationType!
  Sender: ID
  userID: ID!
  title: String!
  businessRequestID: ID!
}

input UpdateNotificationInput {
  id: ID!
  message: String
  type: NotificationType
  Sender: ID
  userID: ID
  title: String
  businessRequestID: ID
}

input DeleteNotificationInput {
  id: ID!
}

type Mutation {
  createNotification(input: CreateNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_iam
  updateNotification(input: UpdateNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_iam
  deleteNotification(input: DeleteNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createReview(input: CreateReviewInput!, condition: ModelReviewConditionInput): Review @aws_api_key @aws_iam
  updateReview(input: UpdateReviewInput!, condition: ModelReviewConditionInput): Review @aws_api_key @aws_iam
  deleteReview(input: DeleteReviewInput!, condition: ModelReviewConditionInput): Review @aws_api_key @aws_iam
  createBusiness(input: CreateBusinessInput!, condition: ModelBusinessConditionInput): Business @aws_api_key @aws_iam
  updateBusiness(input: UpdateBusinessInput!, condition: ModelBusinessConditionInput): Business @aws_api_key @aws_iam
  deleteBusiness(input: DeleteBusinessInput!, condition: ModelBusinessConditionInput): Business @aws_api_key @aws_iam
  createCollection(input: CreateCollectionInput!, condition: ModelCollectionConditionInput): Collection @aws_api_key @aws_iam
  updateCollection(input: UpdateCollectionInput!, condition: ModelCollectionConditionInput): Collection @aws_api_key @aws_iam
  deleteCollection(input: DeleteCollectionInput!, condition: ModelCollectionConditionInput): Collection @aws_api_key @aws_iam
}

type Subscription {
  onCreateNotification: Notification @aws_subscribe(mutations: ["createNotification"]) @aws_api_key @aws_iam
  onUpdateNotification: Notification @aws_subscribe(mutations: ["updateNotification"]) @aws_api_key @aws_iam
  onDeleteNotification: Notification @aws_subscribe(mutations: ["deleteNotification"]) @aws_api_key @aws_iam
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateReview: Review @aws_subscribe(mutations: ["createReview"]) @aws_api_key @aws_iam
  onUpdateReview: Review @aws_subscribe(mutations: ["updateReview"]) @aws_api_key @aws_iam
  onDeleteReview: Review @aws_subscribe(mutations: ["deleteReview"]) @aws_api_key @aws_iam
  onCreateBusiness: Business @aws_subscribe(mutations: ["createBusiness"]) @aws_api_key @aws_iam
  onUpdateBusiness: Business @aws_subscribe(mutations: ["updateBusiness"]) @aws_api_key @aws_iam
  onDeleteBusiness: Business @aws_subscribe(mutations: ["deleteBusiness"]) @aws_api_key @aws_iam
  onCreateCollection: Collection @aws_subscribe(mutations: ["createCollection"]) @aws_api_key @aws_iam
  onUpdateCollection: Collection @aws_subscribe(mutations: ["updateCollection"]) @aws_api_key @aws_iam
  onDeleteCollection: Collection @aws_subscribe(mutations: ["deleteCollection"]) @aws_api_key @aws_iam
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  profilePic: ModelStringInput
  name: ModelStringInput
  isModerator: ModelBooleanInput
  defaultAddress: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  email: ModelStringInput
  profilePic: ModelStringInput
  name: ModelStringInput
  isModerator: ModelBooleanInput
  defaultAddress: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  email: AWSEmail!
  profilePic: AWSURL
  name: String!
  isModerator: Boolean
  defaultAddress: String
}

input UpdateUserInput {
  id: ID!
  email: AWSEmail
  profilePic: AWSURL
  name: String
  isModerator: Boolean
  defaultAddress: String
}

input DeleteUserInput {
  id: ID!
}

type ModelReviewConnection @aws_iam @aws_api_key {
  items: [Review]!
  nextToken: String
}

input ModelReviewFilterInput {
  id: ModelIDInput
  rating: ModelIntInput
  comments: ModelStringInput
  businessID: ModelIDInput
  userID: ModelIDInput
  and: [ModelReviewFilterInput]
  or: [ModelReviewFilterInput]
  not: ModelReviewFilterInput
}

input ModelReviewConditionInput {
  rating: ModelIntInput
  comments: ModelStringInput
  businessID: ModelIDInput
  userID: ModelIDInput
  and: [ModelReviewConditionInput]
  or: [ModelReviewConditionInput]
  not: ModelReviewConditionInput
}

input CreateReviewInput {
  id: ID
  rating: Int
  comments: String
  businessID: ID
  userID: ID
}

input UpdateReviewInput {
  id: ID!
  rating: Int
  comments: String
  businessID: ID
  userID: ID
}

input DeleteReviewInput {
  id: ID!
}

type ModelBusinessConnection @aws_iam @aws_api_key {
  items: [Business]!
  nextToken: String
}

input ModelMinorityGroupsListInput {
  eq: [MinorityGroups]
  ne: [MinorityGroups]
  contains: MinorityGroups
  notContains: MinorityGroups
}

input ModelBusinessTypeInput {
  eq: BusinessType
  ne: BusinessType
}

input ModelBusinessFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  about: ModelStringInput
  phone: ModelStringInput
  address: ModelStringInput
  website: ModelStringInput
  tags: ModelMinorityGroupsListInput
  type: ModelBusinessTypeInput
  primarycolor: ModelStringInput
  secondarycolor: ModelStringInput
  rating: ModelIntInput
  collectionID: ModelIDInput
  email: ModelStringInput
  city: ModelStringInput
  state: ModelStringInput
  zipcode: ModelIntInput
  menu: ModelStringInput
  profileImage: ModelStringInput
  bannerImage: ModelStringInput
  isVerified: ModelBooleanInput
  userID: ModelIDInput
  and: [ModelBusinessFilterInput]
  or: [ModelBusinessFilterInput]
  not: ModelBusinessFilterInput
}

input ModelBusinessConditionInput {
  name: ModelStringInput
  about: ModelStringInput
  phone: ModelStringInput
  address: ModelStringInput
  website: ModelStringInput
  tags: ModelMinorityGroupsListInput
  type: ModelBusinessTypeInput
  primarycolor: ModelStringInput
  secondarycolor: ModelStringInput
  rating: ModelIntInput
  collectionID: ModelIDInput
  email: ModelStringInput
  city: ModelStringInput
  state: ModelStringInput
  zipcode: ModelIntInput
  menu: ModelStringInput
  profileImage: ModelStringInput
  bannerImage: ModelStringInput
  isVerified: ModelBooleanInput
  userID: ModelIDInput
  and: [ModelBusinessConditionInput]
  or: [ModelBusinessConditionInput]
  not: ModelBusinessConditionInput
}

input CreateBusinessInput {
  id: ID
  name: String!
  about: String!
  phone: AWSPhone!
  address: String!
  website: AWSURL
  tags: [MinorityGroups!]
  type: BusinessType!
  primarycolor: String!
  secondarycolor: String!
  rating: Int
  collectionID: ID
  email: AWSEmail!
  city: String!
  state: String!
  zipcode: Int!
  menu: AWSURL
  profileImage: AWSURL
  bannerImage: AWSURL
  isVerified: Boolean
  userID: ID!
}

input UpdateBusinessInput {
  id: ID!
  name: String
  about: String
  phone: AWSPhone
  address: String
  website: AWSURL
  tags: [MinorityGroups!]
  type: BusinessType
  primarycolor: String
  secondarycolor: String
  rating: Int
  collectionID: ID
  email: AWSEmail
  city: String
  state: String
  zipcode: Int
  menu: AWSURL
  profileImage: AWSURL
  bannerImage: AWSURL
  isVerified: Boolean
  userID: ID
}

input DeleteBusinessInput {
  id: ID!
}

type ModelCollectionConnection @aws_iam @aws_api_key {
  items: [Collection]!
  nextToken: String
}

input ModelCollectionFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  color: ModelStringInput
  userID: ModelIDInput
  and: [ModelCollectionFilterInput]
  or: [ModelCollectionFilterInput]
  not: ModelCollectionFilterInput
}

input ModelCollectionConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  color: ModelStringInput
  userID: ModelIDInput
  and: [ModelCollectionConditionInput]
  or: [ModelCollectionConditionInput]
  not: ModelCollectionConditionInput
}

input CreateCollectionInput {
  id: ID
  title: String!
  description: String
  color: String
  userID: ID!
}

input UpdateCollectionInput {
  id: ID!
  title: String
  description: String
  color: String
  userID: ID
}

input DeleteCollectionInput {
  id: ID!
}

